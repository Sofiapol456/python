# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z-BTcEr6Jsb3yx87cBQgpiZlFYLD1N0L
"""

import time

def es_numero(texto=""):

    """
    Función que devuelve si un texto representa un número o no.
    https://www.w3schools.com/python/ref_string_isnumeric.asp
    -1 para no es número, y 1 para sí es número.
    @param: texto   Representa o no un número, incluso valida el vacío.
    @return: Real   1 o -1.
    """

    salida = 1

    if texto.isnumeric() == False:
        salida = -1

    return salida


def imprimir_color_amarillo(mensaje):
    """
    https://python-para-impacientes.blogspot.com/2016/09/dar-color-las-salidas-en-la-consola.html
    Función que imprime un mensaje del usuario en color amarillo.
    Cuándo se trata de funciones para manipular el aspecto, es posible permitirles las impresiones internas.
    @param: string      Mensaje del usuario.
    """
    print("\x1b[1;33m" + mensaje)

def guardar_saludo():
    """
    Función para guardar datos en un archivo de texto.
    Se podrìa mejorar cambiando como un parámetro el nombre del archivo
    y el saludo o contenido.
    """
    f = open ('saludo.txt','w')
    f.write('Hola ADSO. \n')
    f.write('¿Cómo están?.')
    f.close()

def guardar_archivo_html():
    """
    Función para guardar datos en un archivo de html.
    https://programminghistorian.org/es/lecciones/trabajar-con-archivos-de-texto
    """
    f = open ('sistema.html','w')
    f.write('<div style=\"border: solid 1px;\">hola mundo</div>')
    f.close()

def guardar_archivo_html_v2(saludo):
    """
    Función en versión 2 para guardar datos en un archivo de html.
    @param: string      Texto del usuario para guardar.
    """
    texto_css = " border: solid 1px; ";
    texto_css += " color: red; ";
    texto_css += " background-color: yellow; ";

    f = open ('sistema.html','w')
    f.write(' <div style=\" ' + texto_css + ' \"> ' + saludo + ' </div> ')
    f.close()

def leer_archivo():
    """
    Lee un archivo de texto y lo muesra por pantalla.
    """
    f = open ('sistema.html','r')
    mensaje = f.read()
    print(mensaje)
    f.close()

def presentacion():
    """
    Muestra un mensaje, detiene por tres segundos la ejecución, y luego continúa.
    https://realpython.com/python-sleep/
    """
    print("Hola a todos, demostrativo básico de funciones Python.")
    time.sleep(3)

#--------------------- Ejecución y lamado de funciones ---------------
print("Inicio de programa.")
print( "Es número:", es_numero( "hola hola" ) )
print( "Es número:", es_numero( "35" ) )
imprimir_color_amarillo("Hola")
guardar_saludo()
guardar_archivo_html_v2( input( "Digita un texto." ) )
leer_archivo()
presentacion()
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Esta función intercambia los valores de dos variables
def intercambio(a, b):
    # Usa una variable temporal para guardar el valor de a
    temp = a
    # Asigna el valor de b a a
    a = b
    # Asigna el valor de temp (que era el de a) a b
    b = temp
    # Retorna los valores intercambiados
    return a, b

# Asigna los valores iniciales a las variables
a = 5
b = 10
# Intercambia los valores usando la asignación múltiple
a, b = b, a
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#https://www.techiedelight.com/es/how-to-rename-a-file-in-python/

import os
#os.rename('pp.txt', 'uu.txt')

import os.path as path

if path.exists("pp.txt"):
    print("El archivo existe")
else:
    print("El archivo no existe")
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#https://j2logo.com/python/listar-directorio-en-python/

import os

ejemplo_dir = '.'

contenido = os.listdir(ejemplo_dir)

imagenes = []
for fichero in contenido:
    if os.path.isfile(os.path.join(ejemplo_dir, fichero)) and fichero.endswith('.jpg'):
        imagenes.append(fichero)

print(imagenes)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# variables globales y locales
#https://apuntes.de/python/alcance-de-variables-en-python-global-y-local/#gsc.tab=0

g_conteo = 0
g_nombre = "progamador"


def subir():

    global g_conteo
    global g_nombre 
    g_conteo += 1
    g_nombre = "Programador"
    return 0

def bajar():
    
    global g_conteo
    global g_nombre 
    g_nombre = "Analista"
    g_conteo += 1
    return 0

subir()
bajar()

print( g_conteo, " ", g_nombre )
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
print(chr(27)+"[1;33m"+"Ingrese los siguientes datos")

def menu():
  opc = -1 # Inicializar opc con un valor diferente de 0
  while opc != 0:
    opc = int(input("0.salir 1 convertir"))

    if opc == 1:
      convertir()

    if opc == 2:
      print ("el radio es", circulo(int(input("digita el radio"))))

def convertir():
    d = int(input("1 pesos a dolares, 2 dolares a pesos: "))
    t = float(input("digita la taza de cambio: "))

    if d == 1:
        plata = int(input("digita los pesos: "))
        print(plata / t)
    else:
        plata = int(input("digita los dolares: "))
        print(plata * t)

convertir()

import math

def circulo(radio):
    area = math.pi * radio**2
    return area

radio = float(input("Ingrese el radio del círculo: "))
area_circulo = circulo(radio)
print("El área del círculo es:", are3 a_circulo)

menu()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
print("\033[4;35m"+"Gracias por ingresar los datos")

# Esta función muestra un menú con opciones para el usuario
def menu():

    print("Menú de opciones:")
    print("1. Escribir")
    print("2. Leer")
    print("3. Salir")

def imprimir_color_amarillo(mensaje):

    print("\x1b[1;33m" + mensaje)

# Esta función escribe un archivo de texto con el nombre y el contenido dados por el usuario
def escribir():

    nombre = input("Digita el nombre del texto: ")

    try:
        f = open ('saludo.txt','w')
        f.write('Hola dd. \n')
        f.write('¿Cómo están?.')
        f.close()
        print("El archivo se ha escrito correctamente.")
    except:
        print("Ha ocurrido un error al escribir el archivo.")

def guardar_archivo_html():

    f = open ('sistema.html','w')
    f.write('<div style=\"border: solid 1px;\">hola mundo</div>')
    f.close()

def guardar_archivo_html_v2(saludo):

    texto_css = " border: solid 1px; ";
    texto_css += " color: red; ";
    texto_css += " background-color: yellow; ";

    f = open ('sistema.html','w')
    f.write(' <div style=\" ' + texto_css + ' \"> ' + saludo + ' </div> ')
    f.close()

# Esta función lee un archivo de texto con el nombre dado por el usuario
def leer():
    nombre = input("Ingrese el nombre del texto: ")
    try:
          f = open ('sistema.html','r')
          mensaje = f.read()
          print(mensaje)
          f.close()
    except:
        print("Ha ocurrido un error al leer el archivo.")

# Esta función ejecuta el programa principal
def main():
    opcion = 0 # Inicializa la opción con un valor diferente de 3
    while opcion != 3: # Mientras la opción no sea 3
        menu() # Muestra el menú
        opcion = int(input("Ingrese su opción: ")) # Pide al usuario que ingrese una opción
        if opcion == 1: # Si la opción es 1
            escribir() # Llama a la función escribir
        elif opcion == 2: # Si la opción es 2
            leer() # Llama a la función leer
        elif opcion == 3: # Si la opción es 3
            print("Gracias por usar el programa.") # Imprime un mensaje de despedida
        else: # Si la opción es inválida
            print("Opción no válida. Intente de nuevo.") # Imprime un mensaje de error

imprimir_color_amarillo("Bienvenidos, Ingresa los siguientes datos")
main() # Llama a la función principal
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Documentación de funciones
#https://stackoverflow.com/questions/9195455/how-to-document-a-method-with-parameters

#Buen resumen Python
#https://www.freecodecamp.org/espanol/news/operadores-basicos-en-python-con-ejemplos/

def distancia( x1, x2, y1, y2 ):
    """
    Función que calcula la distancia en el plano cartesiano.
    https://www.uaeh.edu.mx/docencia/P_Presentaciones/prepa3/2019/Coordenadas.pdf
    @param: real Coordenada 1 en eje x
    @param: real Coordenara 2 en eje x
    @param: real Coordenada 1 en eje y
    @param: real Coordenara 2 en eje y
    @return:real la distancia entre dos puntos del plano.
    """
    salida = 0
    salida = ((x2-x1)**2+(y2-y1)**2)**0.5
    return round(salida, 2) #Redondeamos con dos decimales.

#--------- Probando las funciones -------------------

#Si las coordenadas son iguales, hay una diagonal.
#Estas coordenadas representan un cuadro de distancia.
#print(distancia(0,1,0,1))

#Estas coordenadas representan una diagonal con mucha distancia distancia.
#print(distancia(0,8,0,8))

#Estas coordenadas representan una columna con mucha distancia distancia.
print(distancia(5,5,1,8))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#https://apuntes.de/python/alcance-de-variables-en-python-global-y-local/#gsc.tab=0

#https://apuntes.de/python/alcance-de-variables-en-python-global-y-local/#gsc.tab=0

g_conteo = 0
g_nombre = "progamador"

def subir():

    global g_conteo
    global g_nombre
    g_conteo += 1
    g_nombre = "Programador"
    return 0

def bajar():
    
    global g_conteo
    global g_nombre 
    g_nombre = "Analista"
    g_conteo += 1
    return 0

def cambiar():

  global g_apellido
  g_apellido = "sofia"

subir()
bajar()
cambiar()


print( g_conteo, " ", g_nombre, " ", g_apellido)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Documentación de funciones
#https://stackoverflow.com/questions/9195455/how-to-document-a-method-with-parameters

#Buen resumen Python
#https://www.freecodecamp.org/espanol/news/operadores-basicos-en-python-con-ejemplos/

def distancia( x1, x2, y1, y2 ):
    """
    Función que calcula la distancia en el plano cartesiano.
    https://www.uaeh.edu.mx/docencia/P_Presentaciones/prepa3/2019/Coordenadas.pdf
    @param: real Coordenada 1 en eje x
    @param: real Coordenara 2 en eje x
    @param: real Coordenada 1 en eje y
    @param: real Coordenara 2 en eje y
    @return:real la distancia entre dos puntos del plano. 
    """
    salida = 0
    salida = ((x2-x1)**2+(y2-y1)**2)**0.5
    return round(salida, 2) #Redondeamos con dos decimales.

def pendiente( x1, x2, y1, y2 ):
    """
    Función que calcula la pendiente en el plano cartesiano.
    https://es.wikipedia.org/wiki/Pendiente_(matem%C3%A1tica)
    Para valores con x iguales, por ejecutarse una división por cero
    se retornara el codigo -1.00001
    @param: real Coordenada 1 en eje x
    @param: real Coordenara 2 en eje x
    @param: real Coordenada 1 en eje y
    @param: real Coordenara 2 en eje y
    @return:real la pendiente entre dos puntos del plano. 
    """
    
    #Se valida que no se divida por cero.
    if x2-x1 != 0:
        salida = round((y2-y1)/(x2-x1),2)
    else:
        salida = -1.00001 #Código de error planeado.
        
    return salida

def validar_dato(dato = "", valor = -100):
    """
    Funcion para validar datos.
    @param: string Texto que significa una ficha o coordenada numérica.
    @return: real Si retorna negativo es no valido.
    """
    salida = 0
    band = False #Pias, los valores booleanos inician con mayúscula.
        
    #print("valor:", valor)
    
    while band == False: #Bandera para validar dato correcto.
        #print("band: ", band)
        
        while dato.isnumeric() == False:
            #print("Dato numérico ", dato.isnumeric()) 
            dato = input("Digita el dato nuevamente. \n")
        
        if int(dato) >= 0 and int(dato) < 8 or int(dato) == valor:
            band = True #Puede seguir, dato validado.
        else: 
            dato = "" #Si el dato o es correcto, lo borramos.
    
    #print("band: ", band, " Dato: ", dato)
    salida = dato
    
    return salida

#--------------------------------------------------------------

def valoracion(ficha1, ficha1X, ficha1Y, ficha2, ficha2X, ficha2Y):

    """
    Valora las fichas dependiendo de su posición.
    @param: real Tipo ficha 1.
    @param: real Columna ficha 1.
    @param: real Fila ficha 1.
    @param: real Tipo ficha 2.
    @param: real Columna ficha 2.
    @param: real Fila ficha 2.
    @return: texto Significa quien amenaza.
    """    

    salida = ""    
    d = distancia(ficha1X, ficha2X, ficha1Y, ficha2Y)
    p = pendiente(ficha1X, ficha2X, ficha1Y, ficha2Y)
    print("Distancia: ", d, " Pendiente: ", p)

   #Solo peones. Importa solo la distancia de la diagonal a un cuadro.
    if ficha1 == ficha2 and ficha1 == 1 and d == 1:
        
        if d == 1.41: #Condición del peón.
            salida += "ambos peones se amenazan. \n"
      
    #Peon vs alfil.
    if ficha1 == 1 and ficha2 == 2 or ficha1 == 2 and ficha2 == 1:
        
        if d == 1.41: #Condición del peón.
            salida += "El peón amenaza al alfil. \n"
        
        #Usamos abs para el valor absoluto y despreciar el signo 
        #de la pendiente del alfil, puede ser 1 o -1 de acuerdo al giro de la diagonal.
        if abs(p) == 1:
            salida += "El alfil amenaza al peón. \n"
            
    #Peon vs torre.
    if ficha1 == 1 and ficha2 == 3 or ficha1 == 3 and ficha2 == 1:
        
        if d == 1.41: #Condición del peón.
            salida += "El peón amenaza a la torre. \n"
        
        #La torre maneja pendiente cero o -1.00001, esto se pdoría mejorar mucho.
        if p == 0 or p == -1.00001:
            salida += "La torre amenaza al peón. \n"
    
    #Reina vs caballo.
    if ficha1 == 6 and ficha2 == 4 or ficha1 == 6 and ficha2 == 4:
        
        if d == 1.41: #Condición de la Reina.
            salida += "La Reina amenaza al caballo. \n"
        
        #El caballo maneja pendiente cero o -1.00001, esto se pdoría mejorar mucho.
        if p == 0 or p == -1.00001:
            salida += "El caballo amenaza a la Reina. \n"
    
    #peon vs caballo.
    if ficha1 == 4 and ficha2 == 1 or ficha1 == 1 and ficha2 == 4:
        
        if d == 1.41: #Condición del peón.
            salida += "El peón amenaza al caballo. \n"
        
        #El caballo maneja pendiente cero o -1.00001, esto se pdoría mejorar mucho.
        if p == 0 or p == -1.00001:
            salida += "El caballo amenaza al peón. \n"
    
    #Rey vs caballo.
    if ficha1 == 5 and ficha2 == 4 or ficha1 == 5 and ficha2 == 4:
        
        if d == 1.41: #Condición del Rey.
            salida += "El Rey amenaza al caballo. \n"
        
        #El caballo maneja pendiente cero o -1.00001, esto se pdoría mejorar mucho.
        if p == 0 or p == -1.00001:
            salida += "El caballo amenaza al Rey. \n"


    return salida  

#*************************************************************
#****************** M E N U **********************************
#*************************************************************

def menu():
    """
    Despliega un menu para el usuario.
    """
    opcion = -1
    ficha1 = 0
    ficha1X = 0
    ficha1Y = 0
    ficha2 = 0
    ficha2X = 0
    ficha2Y = 0
    
    while opcion != 0:
        
        opcion = int(validar_dato(input("Digite 1 para ingresar, 0 para salir. \n"),-1))
        #print("Opcion ", opcion)
        
        if opcion == 1:
            print("Valores fichas: 1 Peones, 2 Alfiles, 3 Torres, 4 Caballos, 5 Rey, 6 Reina.")
            ficha1 = int(validar_dato(input("Digite la ficha 1.")))
            ficha1Y = int(validar_dato(input("Digite la fila.")))
            ficha1X = int(validar_dato(input("Digite la Columna.")))
            ficha2 = int(validar_dato(input("Digite la ficha 2.")))
            ficha2Y = int(validar_dato(input("Digite la fila.")))
            ficha2X = int(validar_dato(input("Digite la Columna.")))
            #print( ficha1, ficha1X, ficha1Y, ficha2, ficha2X, ficha2Y )
            print(valoracion( ficha1, ficha1X, ficha1Y, ficha2, ficha2X, ficha2Y ))

#--------- Probando las funciones -------------------

#Si las coordenadas son iguales, hay una diagonal.
#Estas coordenadas representan un cuadro de distancia.
#print(distancia(0,1,0,1)) 

#Estas coordenadas representan una diagonal con mucha distancia distancia.
#print(distancia(0,8,0,8)) 

#Estas coordenadas representan una columna con mucha distancia distancia.
#print(distancia(5,5,1,8)) 

#Estas coordenadas representan un cuadro de distancia en diagonal.
#print(pendiente(0,1,0,1))

#Estas coordenadas representan un cuadro de distancia en diagonal.
#print(pendiente(1,0,0,1))

#Estas coordenadas representan fichas en la misma columna.
#Las fichas están en la columna 5. En este caso la ecuación
#podría retonar división por cero, por fortuna el programador 
#anticipó esto y retorna un código especal.
#print(pendiente(5,5,0,3)) 

#Estas coordenadas representan fichas en la misma fila.
#En ese caso la pendiente es cero y no hay problema.
#print(pendiente(5,7,2,2)) 


#----------- programa ajedrez, validaciones, no juego ------------

menu()
print("Tenga un buen día.")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

c1 = "X"
c2 = ""
c3 = ""
c4 = "O"
c5 = ""
c6 = ""
c7 = "X"
c8 = ""
c9 = "O"

def imprimir():
    
    """
    Función que construye con una serie de variables el tablero de un triqui.
    @return: texto      UN texto que representa un tablero de triqui.
    """
    
    global c1
    global c2
    global c3
    global c4
    global c5
    global c6
    global c7
    global c8
    global c9

    salida =  arreglar(c1) + "|" + arreglar(c2) + "|" + arreglar(c3) + "\n"
    salida += arreglar(c4) + "|" + arreglar(c5) + "|" + arreglar(c6) + "\n"
    salida += arreglar(c7) + "|" + arreglar(c8) + "|" + arreglar(c9) + "\n"

    return salida

def arreglar(c):
    
    """
    Función que arregla la impresión de una variable para que no descuadre el tablero.
    No requiere acceso a las variables globales. Es una buena función.
    @param: texto Un caracter o texto.
    @return: texto Un texto que cuadra en un tablero de trieui.
    """
    
    salida = c
    
    if c == "":
        salida = "_"
    
    return salida

def asignar(n):
    
    """
    Asigna a una variable de casilla, una jugada mediante un caracter.
    """
    global c1
    global c2
    global c3
    global c4
    global c5
    global c6
    global c7
    global c8
    global c9
    
    if n == 1: c1 = "X"
    if n == 2: c2 = "X"
    if n == 3: c3 = "X"
    if n == 4: c4 = "X"
    if n == 5: c5 = "X"
    if n == 6: c6 = "X"
    if n == 7: c7 = "X"
    if n == 8: c8 = "X"
    if n == 9: c9 = "X"
    
#------------ ejecución -------------------------

#https://www.slingacademy.com/article/python-generate-a-random-integer-between-min-and-max/
#print( random.randint(1, 9) )

asignar( random.randint(1, 9) )

print( imprimir() )
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

c1, c2, c3, c4, c5, c6, c7, c8, c9 = 1, 2, 3, 4, 5, 6, 7, 8, 9

"""
Función que construye con una serie de variables el tablero de un triqui.
@return: texto UN texto que representa un tablero de triqui.
@Autor: 
"""
def mostrar_tablero():
    print(f"{c1} | {c2} | {c3}")
    print("--|---|--")
    print(f"{c4} | {c5} | {c6}")
    print("--|---|--")
    print(f"{c7} | {c8} | {c9}")

def jugar():
    jugador_actual = "X"

    while True:
        mostrar_tablero()

        if jugador_actual == "X":
            # Pedir al jugador que elija una posición
            posicion = int(input(f"Jugador {jugador_actual} elige una posición (1-9): "))
        else:
            # Jugada aleatoria para el jugador O
            posicion = random.choice(generar_numeros_aleatorios())
            print(f"Jugador {jugador_actual} elige la posición {posicion}")

        # Actualizar la posición en el tablero
        if globals()[f"c{posicion}"] != "X" and globals()[f"c{posicion}"] != "O":
            globals()[f"c{posicion}"] = jugador_actual
        else:
            print("Posición ocupada. ¡Inténtalo de nuevo!")
            continue

        # Verificar si hay un ganador
        if verificar_ganador():
            mostrar_tablero()
            print(f"¡Jugador {jugador_actual} ha ganado!")
            break

        # Cambiar al siguiente jugador
        jugador_actual = "O" if jugador_actual == "X" else "X"

def verificar_ganador():
    # Verificar filas
    for i in range(0, 9, 3):
        if globals()[f"c{i+1}"] == globals()[f"c{i+2}"] == globals()[f"c{i+3}"]:
            return True

    # Verificar columnas
    for i in range(1, 4):
        if globals()[f"c{i}"] == globals()[f"c{i+3}"] == globals()[f"c{i+6}"]:
            return True

    # Verificar diagonales
    if c1 == c5 == c9 or c3 == c5 == c7:
        return True

    return False

    """
    Genera números aleatorios de la casilla, una jugada mediante un caracter.
    """

def generar_numeros_aleatorios():
    return random.sample(range(1, 10), 9)

# Menú principal
while True:
    print("Menú:")
    print("0. Cerrar programa")
    print("1. Jugar")

    opcion = input("Selecciona una opción: ")

    if opcion == "0":
        print("¡Hasta luego!")
        break
    elif opcion == "1":
        c1, c2, c3, c4, c5, c6, c7, c8, c9 = 1, 2, 3, 4, 5, 6, 7, 8, 9
        jugar()
    else:
        print("Opción inválida. Inténtalo de nuevo.")

----------------------------------------------------------------------------------------------------------------------------------------

import time

def es_numero(texto=""):
    
    """
    Función que devuelve si un texto representa un número o no.
    https://www.w3schools.com/python/ref_string_isnumeric.asp
    -1 para no es número, y 1 para sí es número.
    @param: texto   Representa o no un número, incluso valida el vacío.
    @return: Real   1 o -1.
    """
    
    salida = 1
    
    if texto.isnumeric() == False:
        salida = -1 
        
    return salida


def imprimir_color_amarillo(mensaje):
    """
    https://python-para-impacientes.blogspot.com/2016/09/dar-color-las-salidas-en-la-consola.html
    Función que imprime un mensaje del usuario en color amarillo.
    Cuándo se trata de funciones para manipular el aspecto, es posible permitirles las impresiones internas.
    @param: string      Mensaje del usuario.
    """
    print("\x1b[1;33m" + mensaje) 

def guardar_saludo():
    """
    Función para guardar datos en un archivo de texto.
    Se podrìa mejorar cambiando como un parámetro el nombre del archivo
    y el saludo o contenido.
    """
    f = open ('saludo.txt','w')
    f.write('Hola ADSO. \n')
    f.write('¿Cómo están?.')
    f.close()

    
def guardar_archivo_html():
    """
    Función para guardar datos en un archivo de html.
    https://programminghistorian.org/es/lecciones/trabajar-con-archivos-de-texto
    """
    f = open ('sistema.html','w')
    f.write('<div style=\"border: solid 1px;\">hola mundo</div>')
    f.close()
    
def guardar_archivo_html_v2(saludo):
    """
    Función en versión 2 para guardar datos en un archivo de html.
    @param: string      Texto del usuario para guardar.
    """
    
    texto_css = " border: solid 1px; ";
    texto_css += " color: red; ";
    texto_css += " background-color: yellow; ";
    
    f = open ('sistema.html','w')
    f.write(' <div style=\" ' + texto_css + ' \"> ' + saludo + ' </div> ')
    f.close()
    
def leer_archivo():
    """
    Lee un archivo de texto y lo muesra por pantalla.
    """
    f = open ('sistema.html','r')
    mensaje = f.read()
    print(mensaje)
    f.close()

def presentacion():
    """
    Muestra un mensaje, detiene por tres segundos la ejecución, y luego continúa.
    https://realpython.com/python-sleep/
    """
    print("Hola a todos, demostrativo básico de funciones Python.")
    time.sleep(3)

#--------------------- Ejecución y lamado de funciones ---------------
#print("Inicio de programa.")
#print( "Es número:", es_numero( "hola hola" ) )
#print( "Es número:", es_numero( "35" ) )
#imprimir_color_amarillo("Hola")
#guardar_saludo()
#guardar_archivo()
#guardar_archivo_html_v2( input( "Digita un texto." ) )
#leer_archivo()
#presentacion()

-----------------------------------------------------------------------------------------------------------------------------------------


def es_numero(texto=""):
    
    """
    Función que devuelve si un texto representa un número o no.
    https://www.w3schools.com/python/ref_string_isnumeric.asp
    -1 para no es número, y 1 para sí es número.
    @param: texto   Representa o no un número, incluso valida el vacío.
    @return: Real   1 o -1.
    """
    
    salida = -1
    
    if texto.isnumeric() == False:
        salida = -1 
        
    return salida

-----------------------------------------------------------------------------------------------------------------------------------------

class Persona:

    def __init__( self, nombreAlNacer ):
        self.nombre = nombreAlNacer
        self.__claveCajero = "123-321"

    def setNombre(self, nombreParaActualizar):
        self.nombre = nombreParaActualizar
    
    def getNombre(self):
        return self.nombre
    
    def setClave(self, nuevaClave):
        self.__claveCajero = nuevaClave

class Universo:
    
    def menu():
        
         alguien1 = Persona("Pedro")
         #alguien1 = Persona("Pablo")
         alguien2 = Persona("Pablo")

         opc = 0

         while opc != -1:
             
             opc = int( input( "Digite la opcion 1 Get Alguien 1 - 2 Set alguien 1 - 3 Mirar nombre. \n" ) )
             
             if opc == 1: print( alguien1.getNombre() )
             if opc == 2: alguien1.setNombre( input( "Digita el nuevo nombre." ) )   
             if opc == 3: print( alguien1.nombre )
             if opc == 4: print( alguien1.__claveCajero )
             if opc == 5: alguien1.setClave("123888")
        
#---------------------

Universo.menu()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class suma:
    def suma (self, n1, n2):
        resultado = n1 + n2
        return resultado

# Ejemplo de uso
calculadora = suma() 
resultado_suma = calculadora.suma(5,4)
print("La suma es igual a:", resultado_suma)

def determinar_positivo_negativo(numero):
    if numero > 0:
        return "El número es positivo"
    elif numero < 0:
        return "El número es negativo"
    else:
        return "El número es cero"

# Ejemplo de uso
numero = 10
resultado = determinar_positivo_negativo(numero)
print(resultado)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class MiClase:
  
    def Metodo1(self):
        return 0
  
    def Metodo2(self):
        return 1 
  
    def metodo2_1(self):
        return 2
    
    def metodo4(self):
        return 3
  
    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        print(a + b + c)
  
# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
#nuevaInstancia.metodo4()

def escribir(self, palabra):
  with open("himnonacional.txt", "w") as archivo:
      archivo.write(palabra)
  print(f"palabra '{palabra}' guardar en el archivo.")

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MiClase:
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def metodo4(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        print(f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'.")

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        print(a + b + c)

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.metodo4("himnonacional.txt", "oh, gloria y macesible, oh jubilo y mortal")

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MiClase:
  
    def Metodo1(self):
        return 0
  
    def Metodo2(self):
        return 1 
  
    def metodo2_1(self):
        return 2

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."
        
        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)
        
        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        print(a + b + c)
  
# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MiClase:
  
    def Metodo1(self):
        return 0
  
    def Metodo2(self):
        return 1 
  
    def metodo2_1(self):
        return 2
    
    def Metodo4(self):
        return 3
    
    def bucle(self):
        return 4

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."
        
        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)
        
        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        print(a + b + c)
  
# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MiClase:
  
    def Metodo1(self):
        return 0
  
    def Metodo2(self):
        return 1 
  
    def metodo2_1(self):
        return 2
    
    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)
       
    def bucle(self):
        return 3

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."
        
        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)
        
        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        print(a + b + c)
  
    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y macesible, oh jubilo y mortal")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MiClase:
  
    def Metodo1(self):
        return 0
  
    def Metodo2(self):
        return 1 
  
    def metodo2_1(self):
        return 2
    
    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)
       
    def bucle(self):
        return 3

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."
        
        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)
        
        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        print(a + b + c)
  
    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y macesible, oh jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MiClase:
  
    def Metodo1(self):
        return 0
  
    def Metodo2(self):
        return 1 
  
    def metodo2_1(self):
        return 2
    
    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)
       
    def bucle(self):
        return 3

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."
        
        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)
        
        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        print(a + b + c)
  
    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

    def par_impar(self, numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y macesible, oh jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(5)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MiClase:
  
    def Metodo1(self):
        return 0
  
    def Metodo2(self):
        return 1 
  
    def metodo2_1(self):
        return 2
    
    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)
       
    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."
        
        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)
        
        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        print(a + b + c)
  
    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

    def par_impar(self, numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(5)
nuevaInstancia.bucle()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class MiClase:
  
    def Metodo1(self):
        return 0
  
    def Metodo2(self):
        return 1 
  
    def metodo2_1(self):
        return 2
    
    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)
       
    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."
        
        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)
        
        print(mensaje)
 
    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c
  
    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)
    
    @staticmethod
    def par_impar(numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")


# ------------------------------

nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)  
nuevaInstancia.par_impar(45)  
nuevaInstancia.bucle()

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Persona:
    def __init__(self, documento):
        self.documento = documento

class Suma:
    def __init__(self, persona):
        self.persona = persona

    def suma(self, n1, n2):
        resultado = n1 + n2
        return resultado

# Ejemplo de uso
calculadora = Suma(persona=Persona(documento="12345678"))
resultado_suma = calculadora.suma(5, 4)
print("La suma es igual a:", resultado_suma)
print("Número de documento de la persona:", calculadora.persona.documento)

class MiClase:

    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

    @staticmethod
    def par_impar(numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

class Persona1:
    def __init__(self):
        self.documento = str(random.randint(10000000, 99999999))

class Suma:
    def __init__(self, persona):
        self.persona = persona

    def suma(self, n1, n2):
        resultado = n1 + n2
        return resultado

# Crear una instancia de Persona1 con un número aleatorio en el documento
persona1 = Persona1()

# Crear una instancia de Suma con la instancia de Persona1
calculadora = Suma(persona1)

# Ejemplo de uso
resultado_suma = calculadora.suma(5, 4)
print("La suma es igual a:", resultado_suma)
print("Número de documento de la persona:", calculadora.persona.documento)

class MiClase:
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

    @staticmethod
    def par_impar(numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

class Persona1:
    def __init__(self):
        self.documento = str(random.randint(10000000, 99999999))
        self.saldo = 0

    def get_saldo(self):
        return self.saldo

    def set_saldo(self, nuevo_saldo):
        self.saldo = nuevo_saldo

class Suma:
    def __init__(self, persona):
        self.persona = persona

    def suma(self, n1, n2):
        resultado = n1 + n2
        return resultado

# Crear una instancia de Persona1 con un número aleatorio en el documento
persona1 = Persona1()

# Crear una instancia de Suma con la instancia de Persona1
calculadora = Suma(persona1)

# Ejemplo de uso
resultado_suma = calculadora.suma(5, 4)
print("La suma es igual a:", resultado_suma)
print("Número de documento de la persona:", calculadora.persona.documento)

# Obtener el saldo de la persona
saldo_persona = persona1.get_saldo()
print("Saldo de la persona:", saldo_persona)

# Establecer un nuevo saldo para la persona
persona1.set_saldo(1000)
nuevo_saldo_persona = persona1.get_saldo()
print("Nuevo saldo de la persona:", nuevo_saldo_persona)

class MiClase:
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

    def par_impar(numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

class Persona1:
    def __init__(self):
        self.documento = str(random.randint(10000000, 99999999))
        self.saldo = 0

    def get_saldo(self):
        return self.saldo

    def set_saldo(self, nuevo_saldo):
        self.saldo = nuevo_saldo

    def leer_saldo_teclado(self):
        nuevo_saldo = int(input("Introduce el nuevo saldo: "))
        self.saldo = nuevo_saldo

class Suma:
    def __init__(self, persona):
        self.persona = persona

    def suma(self, n1, n2):
        resultado = n1 + n2
        return resultado

# Crear una instancia de Persona1 con un número aleatorio en el documento
persona1 = Persona1()

# Crear una instancia de Suma con la instancia de Persona1
calculadora = Suma(persona1)

# Ejemplo de uso
resultado_suma = calculadora.suma(5, 4)
print("La suma es igual a:", resultado_suma)
print("Número de documento de la persona:", calculadora.persona.documento)

# Obtener el saldo de la persona
saldo_persona = persona1.get_saldo()
print("Saldo de la persona:", saldo_persona)

# Leer el saldo de la persona por teclado
persona1.leer_saldo_teclado()
nuevo_saldo_persona = persona1.get_saldo()
print("Nuevo saldo de la persona:", nuevo_saldo_persona)

class MiClase:
    
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

    def par_impar(numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

class Persona1:
    def __init__(self):
        self.documento = str(random.randint(10000000, 99999999))
        self.saldo = 0

    def get_saldo(self):
        return self.saldo

    def set_saldo(self, nuevo_saldo):
        self.saldo = nuevo_saldo

    def leer_saldo_teclado(self):
        if self.saldo == 0:  # Solo permite ingresar el saldo si es la primera vez
            nuevo_saldo = int(input("Introduce el nuevo saldo: "))
            self.saldo = nuevo_saldo
        else:
            print("El saldo ya ha sido actualizado anteriormente.")

    def actualizar_saldo(self, cantidad_retiro):
        if cantidad_retiro <= self.saldo:
            self.saldo -= cantidad_retiro
            print(f"Se ha retirado {cantidad_retiro} de la cuenta. Saldo restante: {self.saldo}")
        else:
            print("Saldo insuficiente para realizar la operación.")

class Suma:
    def __init__(self, persona):
        self.persona = persona

    def suma(self, n1, n2):
        resultado = n1 + n2
        return resultado

# Crear una instancia de Persona1 con un número aleatorio en el documento
persona1 = Persona1()

# Crear una instancia de Suma con la instancia de Persona1
calculadora = Suma(persona1)

# Ejemplo de uso
resultado_suma = calculadora.suma(5, 4)
print("La suma es igual a:", resultado_suma)
print("Número de documento de la persona:", calculadora.persona.documento)

# Obtener el saldo de la persona
saldo_persona = persona1.get_saldo()
print("Saldo de la persona:", saldo_persona)

# Leer el saldo de la persona por teclado
persona1.leer_saldo_teclado()
nuevo_saldo_persona = persona1.get_saldo()
print("Nuevo saldo de la persona:", nuevo_saldo_persona)

# Actualizar el saldo retirando una cantidad
cantidad_retiro = int(input("Introduce la cantidad a retirar: "))
persona1.actualizar_saldo(cantidad_retiro)
nuevo_saldo_persona = persona1.get_saldo()
print("Nuevo saldo de la persona después del retiro:", nuevo_saldo_persona)

class MiClase:
    
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

    def par_impar(numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import random

class Persona1:
    def __init__(self, saldo_inicial):
        self.documento = str(random.randint(10000000, 99999999))
        self.saldo = saldo_inicial

    def get_saldo(self):
        return self.saldo

    def leer_saldo_teclado(self):
        nuevo_saldo = int(input("Introduce el nuevo saldo: "))
        self.saldo = nuevo_saldo

    def actualizar_saldo(self, cantidad_retiro):
        if cantidad_retiro <= self.saldo:
            self.saldo -= cantidad_retiro
            print(f"Se ha retirado {cantidad_retiro} de la cuenta. Saldo restante: {self.saldo}")
        else:
            print("Saldo insuficiente para realizar la operación.")

class CajeroAutomatico:
    def __init__(self, persona):
        self.persona = persona

    def retirar_dinero(self):
        while True:
            cantidad_a_retirar = int(input("Ingrese la cantidad que desea retirar (0 para salir): "))
            if cantidad_a_retirar == 0:
                break
            self.persona.actualizar_saldo(cantidad_a_retirar)

if __name__ == "__main__":
    saldo_inicial = int(input("Introduce tu saldo inicial: "))
    persona1 = Persona1(saldo_inicial)
    cajero_automatico = CajeroAutomatico(persona1)
    cajero_automatico.retirar_dinero()

class MiClase:
    
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)
    def par_impar(self, numero):
        if numero % 2 == 0:
           print(f"El número {numero} es par.")
        else:
           print(f"El número {numero} es impar.")

# ------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

class Persona1:
    def __init__(self):
        self.documento = str(random.randint(10000000, 99999999))
        self.saldo = 0

    def get_saldo(self):
        return self.saldo

    def set_saldo(self, nuevo_saldo):
        self.saldo = nuevo_saldo

    def leer_saldo_teclado(self):
        if self.saldo == 0:
            nuevo_saldo = int(input("Introduce el nuevo saldo: "))
            self.saldo = nuevo_saldo
        else:
            print("El saldo ya ha sido actualizado anteriormente.")

    def actualizar_saldo(self, cantidad_retiro):
        if cantidad_retiro <= self.saldo:
            self.saldo -= cantidad_retiro
            print(f"Se ha retirado {cantidad_retiro} de la cuenta. Saldo restante: {self.saldo}")
        else:
            print("Saldo insuficiente para realizar la operación.")

class Suma:
    def __init__(self, persona):
        self.persona = persona

    def suma(self, n1, n2):
        resultado = n1 + n2
        return resultado

class MiClase:
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)

    def par_impar(self, numero):
        if numero % 2 == 0:
            print(f"El número {numero} es par.")
        else:
            print(f"El número {numero} es impar.")

# -----------------------------------
# Crear una instancia de Persona1 con un número aleatorio en el documento
persona1 = Persona1()

# Crear una instancia de Suma con la instancia de Persona1
calculadora = Suma(persona1)

# Ejemplo de uso
resultado_suma = calculadora.suma(5, 4)
print("La suma es igual a:", resultado_suma)
print("Número de documento de la persona:", calculadora.persona.documento)

# Obtener el saldo de la persona
saldo_persona = persona1.get_saldo()
print("Saldo de la persona:", saldo_persona)

# Leer el saldo de la persona por teclado
persona1.leer_saldo_teclado()
nuevo_saldo_persona = persona1.get_saldo()
print("Nuevo saldo de la persona:", nuevo_saldo_persona)

# Retirar dinero en un bucle hasta que el usuario decida salir
while True:
    cantidad_a_retirar = int(input("Ingrese la cantidad que desea retirar (o 0 para salir): "))

    if cantidad_a_retirar == 0:
        break

    persona1.actualizar_saldo(cantidad_a_retirar)
    nuevo_saldo_persona = persona1.get_saldo()
    print("Nuevo saldo de la persona después del retiro:", nuevo_saldo_persona)

# -----------------------------------
# Crear una instancia de MiClase y llamar a sus métodos
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

class Persona:
    def __init__(self, saldo_inicial):
        self.documento = str(random.randint(10000000, 99999999))
        self.saldo = saldo_inicial

    def get_saldo(self):
        return self.saldo

    def leer_saldo_teclado(self):
        nuevo_saldo = int(input("Introduce el nuevo saldo: "))
        self.saldo = nuevo_saldo

    def actualizar_saldo(self, cantidad_retiro):
        if cantidad_retiro <= self.saldo:
            self.saldo -= cantidad_retiro
            print(f"Se ha retirado {cantidad_retiro} de la cuenta. Saldo restante: {self.saldo}")
        else:
            print("Saldo insuficiente para realizar la operación.")

class CajeroAutomatico:
    def __init__(self, persona):
        self.persona = persona

    def retirar_dinero(self):
        while True:
            cantidad_a_retirar = int(input("Ingrese la cantidad que desea retirar (0 para salir): "))
            if cantidad_a_retirar == 0:
                break
            self.persona.actualizar_saldo(cantidad_a_retirar)

def menu_persona(persona):
    cajero_automatico = CajeroAutomatico(persona)
    while True:
        print("\nOperaciones con Persona:")
        print("1. Retirar dinero")
        print("2. Consultar saldo")
        print("3. Volver al menú principal")

        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            cajero_automatico.retirar_dinero()
        elif opcion == '2':
            print(f"Saldo actual: {persona.get_saldo()}")
        elif opcion == '3':
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")

if __name__ == "__main__":
    personas = []

    for i in range(1, 4):
        saldo_inicial = int(input(f"Introduce el saldo inicial para Persona{i}: "))
        persona = Persona(saldo_inicial)
        personas.append(persona)

    while True:
        print("\nMenú Principal:")
        print("1. Operaciones con Persona1")
        print("2. Operaciones con Persona2")
        print("3. Operaciones con Persona3")
        print("0. Salir")

        opcion = input("Seleccione una opción: ")

        if opcion in {'1', '2', '3'}:
            menu_persona(personas[int(opcion) - 1])
        elif opcion == '0':
            print("Saliendo del programa.")
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")

class MiClase:
    
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)
    def par_impar(self, numero):
        if numero % 2 == 0:
           print(f"El número {numero} es par.")
        else:
           print(f"El número {numero} es impar.")

# -----------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

class Persona:
    def __init__(self, saldo_inicial):
        self.documento = str(random.randint(10000000, 99999999))
        self.saldo = saldo_inicial

    def get_saldo(self):
        return self.saldo

    def leer_saldo_teclado(self):
        nuevo_saldo = int(input("Introduce el nuevo saldo: "))
        self.saldo = nuevo_saldo

    def actualizar_saldo(self, cantidad_retiro):
        if cantidad_retiro <= self.saldo:
            self.saldo -= cantidad_retiro
            print(f"Se ha retirado {cantidad_retiro} de la cuenta. Saldo restante: {self.saldo}")
        else:
            print("Saldo insuficiente para realizar la operación.")

class CajeroAutomatico:
    def __init__(self, persona):
        self.persona = persona

    def retirar_dinero(self):
        while True:
            cantidad_a_retirar = int(input("Ingrese la cantidad que desea retirar (0 para salir): "))
            if cantidad_a_retirar == 0:
                break
            self.persona.actualizar_saldo(cantidad_a_retirar)

def menu_persona(persona):
    cajero_automatico = CajeroAutomatico(persona)
    while True:
        print("\nOperaciones con Persona:")
        print(f"Documento de la persona: {persona.documento}")
        print("1. Retirar dinero")
        print("2. Consultar saldo")
        print("3. Volver al menú principal")

        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            cajero_automatico.retirar_dinero()
        elif opcion == '2':
            print(f"Saldo actual: {persona.get_saldo()}")
        elif opcion == '3':
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")

if __name__ == "__main__":
    personas = []

    for i in range(1, 4):
        saldo_inicial = int(input(f"Introduce el saldo inicial para Persona{i}: "))
        persona = Persona(saldo_inicial)
        personas.append(persona)

    while True:
        print("\nMenú Principal:")
        print("1. Operaciones con Persona1")
        print("2. Operaciones con Persona2")
        print("3. Operaciones con Persona3")
        print("0. Salir")

        opcion = input("Seleccione una opción: ")

        if opcion in {'1', '2', '3'}:
            menu_persona(personas[int(opcion) - 1])
        elif opcion == '0':
            print("Saliendo del programa.")
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")

class MiClase:
   
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)
    def par_impar(self, numero):
        if numero % 2 == 0:
           print(f"El número {numero} es par.")
        else:
           print(f"El número {numero} es impar.")

# -----------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import random

class Persona:
    
    def __init__(self, saldo_inicial):
        self.documento = str(random.randint(10000000, 99999999))
        self.saldo = saldo_inicial

    def get_saldo(self):
        return self.saldo

    def leer_saldo_teclado(self):
        nuevo_saldo = int(input("Introduce el nuevo saldo: "))
        self.saldo = nuevo_saldo

    def actualizar_saldo(self, cantidad_retiro):
        if cantidad_retiro <= self.saldo:
            self.saldo -= cantidad_retiro
            print(f"Se ha retirado {cantidad_retiro} de la cuenta. Saldo restante: {self.saldo}")
        else:
            print("Saldo insuficiente para realizar la operación.")

class CajeroAutomatico:
    def __init__(self, persona):
        self.persona = persona

    def retirar_dinero(self):
        while True:
            cantidad_a_retirar = int(input("Ingrese la cantidad que desea retirar (0 para salir): "))
            if cantidad_a_retirar == 0:
                break
            self.persona.actualizar_saldo(cantidad_a_retirar)

def menu_persona(persona):
    cajero_automatico = CajeroAutomatico(persona)
    while True:
        print("\nOperaciones con Persona:")
        print(f"Documento de la persona: {persona.documento}")
        print("1. Retirar dinero")
        print("2. Consultar saldo")
        print("3. Volver al menú principal")

        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            cajero_automatico.retirar_dinero()
        elif opcion == '2':
            print(f"Saldo actual: {persona.get_saldo()}")
        elif opcion == '3':
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")

if __name__ == "__main__":
    personas = []

    for i in range(1, 3):  # Cambiado el rango a 3 para trabajar solo con Persona1 y Persona2
        saldo_inicial = int(input(f"Introduce el saldo inicial para Persona{i}: "))
        persona = Persona(saldo_inicial)
        personas.append(persona)

    while True:
        print("\nMenú Principal:")
        print("1. Operaciones con Persona1")
        print("2. Operaciones con Persona2")
        print("0. Salir")

        opcion = input("Seleccione una opción: ")

        if opcion in {'1', '2'}:
            menu_persona(personas[int(opcion) - 1])
        elif opcion == '0':
            print("Saliendo del programa.")
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")


class MiClase:
   
    def Metodo1(self):
        return 0

    def Metodo2(self):
        return 1

    def metodo2_1(self):
        return 2

    def Metodo4(self, nombre_archivo, mensaje):
        d = self.Metodo3()
        print(d)
        e = self.escribir(nombre_archivo, mensaje)
        print(e)

    def bucle(self):
        for i in range(1, 101, 2):  # Imprime los números impares del 1 al 100
            print(i)

    def calcular_salario_minimo(self, salario_minimo):
        if 1000000 < salario_minimo < 700001:
            mensaje = "El salario mínimo está en el rango adecuado."
        elif salario_minimo >= 700001:
            mensaje = "Se ha excedido el millón."
        else:
            mensaje = "El salario mínimo es menor a un millón."

        with open("salario_minimo.txt", "w") as archivo:
            archivo.write(mensaje)

        print(mensaje)

    def Metodo3(self):
        a = self.Metodo1()
        b = self.Metodo2()
        c = self.metodo2_1()
        return a + b + c

    def escribir(self, nombre_archivo, mensaje):
        with open(nombre_archivo, "w") as archivo:
            archivo.write(mensaje)
        return f"El mensaje '{mensaje}' ha sido guardado en el archivo '{nombre_archivo}'."

    def rango(self, inicio, fin, paso):
        for i in range(inicio, fin, paso):
            print(i)
    def par_impar(self, numero):
        if numero % 2 == 0:
           print(f"El número {numero} es par.")
        else:
           print(f"El número {numero} es impar.")

# -----------------------------------
nuevaInstancia = MiClase()
nuevaInstancia.Metodo3()
nuevaInstancia.calcular_salario_minimo(7000)
nuevaInstancia.Metodo4("himnonacional.txt", "oh, gloria y inmarcesible, oh, jubilo y mortal")
nuevaInstancia.rango(0, 10, 2)
nuevaInstancia.par_impar(32)
nuevaInstancia.par_impar(45)
nuevaInstancia.bucle()
